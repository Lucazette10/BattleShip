@page "/game/{difficulty}"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@using System.Text.Json;

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<div class="globalContainer">
    <div class="header">
        <div class="menu" @onclick="RedirectToHomePage">
            <i class="fas fa-ship"></i>
            <p>Retour menu</p>
        </div>
        <h3 class="BattleshipGameTitle">BattleShip Game : @Id</h3>
    </div>

    @if(!gameOver) {
        <div class="container">
            <div class="playerSideContainer">
                <div class="playerGrid">
                    <h4>Your Grid</h4>
                    <div class="playerTable">
                        <table>
                            <tr>
                                <td></td> <!-- Empty cell for the top-left corner -->
                                @for (char c = 'A'; c <= 'J'; c++)
                                {
                                    <td style="text-align: center">@c</td>
                                }
                            </tr>
                            @for (int row = 0; row < 10; row++) {
                                <tr>
                                    <td>@(row + 1)</td> <!-- Row number -->
                                    @for (int col = 0; col < 10; col++) {
                                        var style = "border: 1px solid black; width: 20px; height: 20px; text-align: center;";
                                        if (playerGrid[row, col] == "A" || playerGrid[row, col] == "B" || playerGrid[row, col] == "C" || playerGrid[row, col] == "D" || playerGrid[row, col] == "E" || playerGrid[row, col] == "F") {
                                            style += "background-color: rgba(128, 128, 128, 0.5);";
                                        } else if (playerGrid[row, col] == "X") {
                                            style += "background-color: rgba(255, 0, 0, 0.5);"; 
                                        } else {
                                            style += "background-color: rgba(0, 0, 255, 0.5);"; 
                                        }
                                        <td style="@style">
                                            @playerGrid[row, col]
                                        </td>
                                    }
                                </tr>
                            }
                        </table>
                    </div>
                </div>

                <h4>Historique des coups joués</h4>
                <div class="leaderboard">
                    <ul>
                        @foreach(var move in playerMoves) {
                            <li>@move</li>
                        }
                    </ul>
                </div>
            </div>
            

            <div class="computerGrid">
                <h4>Opponent's Grid</h4>
                <table>
                    <tr>
                        <td></td> <!-- Empty cell for the top-left corner -->
                        @for (char c = 'A'; c <= 'J'; c++)
                        {
                            <td style="text-align: center">@c</td>
                        }
                    </tr>
                    @for (int row = 0; row < 10; row++) {
                        var currentRow = row;
                        <tr>
                            <td>@(row + 1)</td> <!-- Row number -->
                            @for (int col = 0; col < 10; col++) {
                                var currentCol = col;
                                var cellClass = "grid-cell ";
                                if (opponentGrid[row, col] == "S") {
                                    cellClass += "ship";
                                } else if (opponentGrid[row, col] == "X") {
                                    cellClass += "hit";
                                } else {
                                    cellClass += "water";
                                }
                                <td class="@cellClass" @onclick="() => HandleClick(currentRow, currentCol)">
                                    @opponentGrid[row, col]
                                </td>
                            }
                        </tr>
                    }
                </table>
            </div>
        </div>
    }
    else {
        <div class="homeContainer">
            <div class="gameMode">
                <p>Game Over</p>
                <p>Le gagnant est : @winner</p>
            </div>
            <div class="menu">
                <button class="btn btn-primary" @onclick="RedirectToHomePage">Retour au menu</button>
            </div>
</div>
}
</div>


@code {
    //[Parameter] public string Id { get; set; }
    [Parameter] public string difficulty { get; set; }

    private Models.Game game;
    private List<Models.Ship> playerShips;
    private string Id;
    private bool gameOver = false;
    private string winner = "";
    private string[,] opponentGrid = new string[10, 10];
    private string[,] playerGrid = new string[10, 10];
    private List<string> playerMoves = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        game = await StartGame();
        playerShips = game.playerShips;
        Id = game.gameId;

        foreach (var ship in playerShips)
        {
            foreach (var coordinate in ship.coordinates)
            {
                playerGrid[coordinate.Row, coordinate.Col] = ship.name;
            }
        }

    }
    
    
    private async Task HandleClick(int row, int col)
    {
        Console.WriteLine($"Clicked on {row}, {col}");
        Console.WriteLine($"Sending attack to {Id}");

        if (opponentGrid[row, col] == "X" || opponentGrid[row, col] == "O")
        {
            Console.WriteLine("You already attacked this cell!");
            return;
        }

        var coordinate = new { Row = row, Col = col };
        var json = JsonSerializer.Serialize(coordinate);
        var data = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

        var response = await HttpClient.PostAsync($"/attack/{Id}", data);
        Console.WriteLine($"response : {response}");

        if (response.IsSuccessStatusCode)
        {
            // Update the UI
            var attackResponse = await response.Content.ReadFromJsonAsync<Models.AttackResponse>();
            Console.WriteLine($"attack response : {attackResponse.ComputerAttack.Col}, {attackResponse.ComputerAttack.Row}");

            if(attackResponse.ComputerWon == true){
                Console.WriteLine("L'ordinateur a gagné !");
                gameOver = true;
                winner = "Computer";
            }
            if(attackResponse.PlayerWon == true){
                Console.WriteLine("Tu as gagné !");
                gameOver = true;
                winner = "Player";
            }

            if(playerGrid[attackResponse.ComputerAttack.Row, attackResponse.ComputerAttack.Col] == "A" ||
                playerGrid[attackResponse.ComputerAttack.Row, attackResponse.ComputerAttack.Col] == "B" ||
                playerGrid[attackResponse.ComputerAttack.Row, attackResponse.ComputerAttack.Col] == "C" ||
                playerGrid[attackResponse.ComputerAttack.Row, attackResponse.ComputerAttack.Col] == "D" ||
                playerGrid[attackResponse.ComputerAttack.Row, attackResponse.ComputerAttack.Col] == "E" ||
                playerGrid[attackResponse.ComputerAttack.Row, attackResponse.ComputerAttack.Col] == "F" ||
                playerGrid[attackResponse.ComputerAttack.Row, attackResponse.ComputerAttack.Col] == "G") {
                    Console.WriteLine("Computer hit your ship!");
                    playerGrid[attackResponse.ComputerAttack.Row, attackResponse.ComputerAttack.Col] = "X";
            }

            else if(playerGrid[attackResponse.ComputerAttack.Row, attackResponse.ComputerAttack.Col] == null) {
                Console.WriteLine("Computer missed your ship!");
                playerGrid[attackResponse.ComputerAttack.Row, attackResponse.ComputerAttack.Col] = "O";
            }
            else {
                Console.WriteLine("Computer already attacked this cell!");
            }

            if(attackResponse.PlayerAttackResult) {
                Console.WriteLine("You hit the ship!");
                playerMoves.Add($"You hit the ship at ({row}, {col})!");
                opponentGrid[row, col] = "X";
            }
            else if(!attackResponse.PlayerAttackResult) {
                Console.WriteLine("You missed the ship!");
                playerMoves.Add($"You missed the ship at ({row}, {col})!");
                opponentGrid[row, col] = "O";
            }
            else {
                Console.WriteLine("You already attacked this cell !");
                playerMoves.Add($"You already attacked this cell !");
            }

            StateHasChanged();
            
        }
        else
        {
            // Handle the error
        }
    }

    private async Task<Models.Game> StartGame(){

        var response = await HttpClient.GetAsync($"/start/{difficulty}");

        if (response.IsSuccessStatusCode)
        {
            if(response.Content.Headers.ContentType.MediaType == "application/json") {
                game = await response.Content.ReadFromJsonAsync<Models.Game>(); 
                return game;
            }
            else {
                Console.WriteLine("Error: Response is not in JSON format");
            }
        }
        else
        {
            var errorResponse = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {errorResponse}");
        }
        return null;
    }

    private async Task RedirectToHomePage()
    {
        NavigationManager.NavigateTo($"/"); 
    }

}